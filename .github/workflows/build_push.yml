name: CI/CD - Build, Push & Deploy

on:
  push:
    branches:
      - main
    paths:
      - 'backend/**'
      - 'frontend/**'
      - 'docker-compose.yml'
      - 'nginx/**'

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build & Push Backend
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: gillnavi/dd-backend:latest
          platforms: linux/amd64

      - name: Build & Push Frontend
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          tags: gillnavi/dd-frontend:latest
          platforms: linux/amd64

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" | tr -d '\r' > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      - name: Copy files to EC2
        run: |
          ssh -i ~/.ssh/id_rsa ubuntu@${{ secrets.EC2_HOST }} "mkdir -p ~/app"
          scp -i ~/.ssh/id_rsa ./docker-compose.yml ubuntu@${{ secrets.EC2_HOST }}:~/app/
          scp -i ~/.ssh/id_rsa -r ./nginx/ ubuntu@${{ secrets.EC2_HOST }}:~/app/ || true

      - name: Deploy Application
        run: |
          ssh -i ~/.ssh/id_rsa ubuntu@${{ secrets.EC2_HOST }} << 'EOF'
            cd ~/app

            # Stop old containers
            docker-compose down || true

            # Remove unused images
            docker image prune -f || true

            # Pull latest images
            docker-compose pull

            # Start all containers
            docker-compose up -d

            # Wait and check status
            sleep 15
            docker-compose ps
          EOF
