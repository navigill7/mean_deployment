name: CI/CD - Build, Push & Deploy

on:
  push:
    branches:
      - main
    paths:
      - 'backend/**'
      - 'frontend/**'
      - 'docker-compose.yml'

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Build and push with better error handling
      - name: Build & Push Backend
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: gillnavi/dd-backend:latest
          platforms: linux/amd64
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build & Push Frontend
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          tags: gillnavi/dd-frontend:latest
          platforms: linux/amd64
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Verify images were pushed correctly
      - name: Verify Images
        run: |
          docker pull gillnavi/dd-backend:latest
          docker pull gillnavi/dd-frontend:latest
          docker inspect gillnavi/dd-backend:latest
          docker inspect gillnavi/dd-frontend:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy with Docker Compose
        run: |
          ssh -i ~/.ssh/id_rsa ubuntu@${{ secrets.EC2_HOST }} "
            # Create app directory if it doesn't exist
            if [ ! -d ~/app ]; then
              git clone https://github.com/navigill7/mean_deployment.git ~/app
            else
              cd ~/app && git pull origin main
            fi

            cd ~/app

            # Stop existing services
            docker-compose down

            # Clean up old images to avoid conflicts
            docker image prune -f

            # Pull latest images with retry logic
            for i in {1..3}; do
              if docker-compose pull; then
                break
              else
                echo 'Pull failed, retrying in 10 seconds...'
                sleep 10
              fi
            done

            # Verify images before starting
            docker inspect gillnavi/dd-backend:latest
            docker inspect gillnavi/dd-frontend:latest

            # Start services
            docker-compose up -d

            # Check if all services are running
            sleep 10
            docker-compose ps
          